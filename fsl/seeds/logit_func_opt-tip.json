[
     {
          "algorithm": "The algorithm sums up two logits: the logits generated by zero-shot classifier and the logits generated by a cache model. The first logits are computed by applying linear transformation to test features. The second logits are obtained by first computing the similarity matrix between test and train features and then multiplying the transformed similarity matrix to soft train label matrix. While computing image-image similarity, selected feature channels are used.",
          "code": "import torch\nimport torch.nn.functional as F\n\ndef compute_logits(train_feats, train_labels, test_feats, clip_weights, indices, alpha0, alpha1, alpha2):\n\n    c, k, d = train_feats.shape\n    train_feats = train_feats.view(-1, d)\n    train_labels = F.one_hot(train_labels.view(-1)).type(train_feats.dtype)\n    clip_logits = 100*test_feats @ clip_weights.t() \n    \n    similarity_matrix = test_feats@train_feats.t() \n    cache_logits = ((-1)*(alpha1-alpha1*similarity_matrix)).exp()@train_labels \n\n    logits = clip_logits + alpha0*cache_logits\n    \n    return logits",
          "objective": 10000.0,
          "other_inf": null
     }
]
